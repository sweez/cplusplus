Day 2 Notes & Answers

Today, you will learn
• The parts of a C++ program
• How the parts work together
• What a function is and what it does


Notes:

Explained:

#include <iostream>

int main()
{
	std::cout << "Hello World!\n";
	return 0;
}

# - The preprocessor

The preprocessor runs before your compiler each time the compiler is
invoked. The preprocessor translates any line that begins with a pound symbol (#) into a special command, getting your code file ready for the compiler.


#include - preprocessor instruction

The command #include tells the compiler to find the specificed file, read it and place it right here.


<> - The angle brackets

The angle brackets are placed just after the #include command.
This is where you specify the files/libraries you want to have included.


iostream - Input-Output-Stream

iostream is used by cout, which assists with writing to the console. 


main() - Main function

The main function is special as it will start automatically along with your program. Other functions will not do this and will have to be invoked/called by code.

Like any other function, main() must state what kind of value it returns. 
In the example above it will return an integer to the Operating System to indicate it's complete.
In this case it returns the integer value 0, as shown by "Return 0".

Some compilers allows you to declare the main() function to return void. 
This is no longer legal C++ and should be refrained from using this method. 
Instead just have it return int, and then simply return 0 as the last line in main(). 



All functions begin with an {opening brace and end with a closing brace}
Everything between the opening and closing braces is considered part of the function.

The object cout is used to prinmt a message to the screen. 
Objects will be brought up in more detail on Day 6.
'cout' is part of the standard library. 

A library is a collection of pre-made classes available for easy use.
The standard library comes with every compiler that follows the ANSI standard.

Here’s how cout is used: Type the word cout, followed by the output redirection operator (<<). Whatever follows the output redirection operator is written to the console. 
If you want a string of characters written, be certain to enclose them in double quotes (“).

\n tells cout to go to a new line.

endl stands for END Line, and is prefered to be used over \n as it might not be supported on particular OS or platform(s).

\t tells cout to insert a tab character

float tells cout to allow decimals

double tells cout that this is a floating-point value. 
More details on this will be explained on Day 3.


Using std:: in front of every cout and endl quickly becomes tedious. 
You can solve this by telling the compiler that you will be using the standard library cout and endl.  

This can be done in two ways:

1. Specify what namespace you want to use for what object
using std::cout;
using std::endl;

2. Tells the compiler that you will be using the entirety of the standard namespace.
using namespace std;



Commenting your code:

There is two ways to comment your code: 
//single-line comments

/* Multi
Line comments
*/

Multi line comments are mainly used to block out large blocks of a program, but it can also be used for commenting.


It is strongly recommended to leave a comment at the top of each function, explaining what the function does and what value(s) it returns.

Function names should be short, and to the point to make it as self-explanatory as possible. 

Comments should not be used as an excuse for writing hard-to-understand code though, name your variables and functions properly and use comments to supplement understanding. 

Example of commenting:

1: #include <iostream>
2:
3: int main()
4: {
5:	 using std::cout;
6:
7:	 /* this is a comment
8:	 and it extends until the closing
9: 	 star-slash comment mark */
10:	 cout << “Hello World!\n”;
11:	 // this comment ends at the end of the line
12:  cout << “That comment ended!\n”;
13:
14:  // double-slash comments can be alone on a line
15:  /* as can slash-star comments */
16:  return 0;
17: }

The bottom line is that comments should not say WHAT is happening, they should say WHY is happening.





Functions: 

A function must be either called or invoked during the course of your program. 
main() is automatically invoked by the Operating System.

A program is executed line-by-line in the order it appears in your source code until a function is reached. Then, the program branches off to execute the function. 

When the function finishes, it returns control to the line of code immediately following the call to the function.

A good analogy for this is sharpening your pencil. If you are drawing a picture and your pencil point breaks, you might stop drawing, go sharpen the pencil, and then return to what you were doing. 
When a program needs a service performed, it can call a function to perform the service and then pick up where it left off when the function is finished running.


Demonstration of calling a function

#include <iostream>

// function Demonstration Function
// prints out a useful message
void DemonstrationFunction()
{
	std::cout << “In Demonstration Function\n”;
}

// function main - prints out a message, then
// calls DemonstrationFunction, then prints out
// a second message.

int main()
{
	std::cout << “In main\n” ;
	DemonstrationFunction();
	std::cout << “Back in main\n”;
	return 0;
}


Functions consist of a header and a body. 
The header consists of the return type, the function name and the parameters to that function.
The parameters to a function enable values to be passed into the function. 

Thus, if the functino were to add two numbers, the numbers would be the parameters to the function. Here's an example of a typical function header that declares a function named Sum that receives two integer values (first and second):

int Sum( int first, int second)

A parameter is a declaration of what type of value will be passed in; the actual value passed in when the function is called is referred to as an argument.


The body of a function consists of an opening brace, zero or more statements, and a closing brace. The statements constitute the workings of the function






--- Workshop ---

Quiz: 

1. What is the difference between the compiler and the preprocessor?
A: A compiler compiles the code while a preprocessor tells the compiler what libraries to include.
The preprocessor runs first.

2. Why is the function main() special?
A: It will be automatically invoked by the program when executed and must exist in every program. 

3. What are the two types of comments, and how do they differ?
A: Single-line & multi-line comments. 
// Single line is for one liners

/* multi-line
comments can be stretched out over several 
lines*/ 

4. Can comments be nested?
A: No.

Correction: Single-line comments can be nested within multi-line comments.

5. Can comments be longer than one line?
A: Yes, you will have to use /* */ though.



Exercises:



1. Write a program that writes “I love C++” to the console.
A: 

#include <iostream>

int main()
{
    std::cout << "I love C++";
}


2. Write the smallest program that can be compiled, linked, and run.
A: 

int main()
{

}


3. BUG BUSTERS: Enter this program and compile it. Why does it fail? How can you fix it?
1: #include <iostream>
2: main()
3: {
4: std::cout << Is there a bug here?”;
5: }

A: Add 'int' before the main function, add a " in front of the text string


4. Fix the bug in Exercise 3 and recompile, link, and run it.
A: 

#include <iostream>

int main()
{
	std::cout << "Is there a bug here ? ";
}



5. Modify Listing 2.7 to include a subtract function. Name this function Subtract() and use it in the same way that the Add() function was called. You should also pass the same values that were passed to the Add() function.

A: 

#include <iostream>
int Add(int first, int second)
{
	std::cout << "In Add(), received " << first << " and " << second << "\n";
	return (first + second);
}

int Substract(int first, int second)
{
	std::cout << "\nIn Substract(), received " << first << " and " << second << "\n";
	return (first - second);
}

int main()
{
	using std::cout;
	using std::cin;

	cout << "I'm in main()!\n";
	int a, b, c;
	cout << "Enter two numbers: ";
	cin >> a;
	cin >> b;
	
	cout << "\nCalling Add()\n";
	c = Add(a, b);
	cout << "\nBack in main().\n";
	cout << "c was set to " << c << "\n";

	c = Substract(a, b);
	cout << "\nBack in main().\n";
	cout << "c was set to " << c;

	cout << "\nExiting...\n\n";
	return 0;
}